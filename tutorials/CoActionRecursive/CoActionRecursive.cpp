/******************************************************************
* File:        CoActionRecursive.cpp
* Description: Contains code for compiling, running C Lambda
*              scripting language.
*              See file CoActionRecursive.c955 to understand
*              what the script does.
* Author:      Vincent Pham
*
* Copyright (c) 2018 VincentPT.
** Distributed under the MIT License (http://opensource.org/licenses/MIT)
**
*
**********************************************************************/

#include "stdafx.h"
#include "../TutorialCommon.h"

// native function that is real implementation of 'println' in the script
void println(const RawString& rs) {
	wcout << rs.elms << endl;
}

void importApplicationLibrary(ScriptCompiler* scriptCompiler) {
	FunctionRegisterHelper fb(scriptCompiler);

	// register 'println' function
	registerFunction
		<void, const RawString&> // native function prototype
		(fb, // register helper object
			println, // native function
			"println", //script function name
			"void", // return type of the script function
			"String&" // parameter type of the function
			);

}

int main(int argc, char* argv[])
{
	// set the global stack size of program
	// the global stack size is quite large because we will execute a recursive calling function in global context
	auto program = compileProgram(importApplicationLibrary, "CoActionRecursive.c955", 1024 * 1024);
	if (program) {
		// run the code that place in global scope
		program->runGlobalCode();
		
		// run main function of the script
		runProgram(program);

		// clean up global memory generated by runGlobalCode method
		program->cleanupGlobalMemory();

		delete program;
	}

    return 0;
}

