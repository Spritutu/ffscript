#ifndef _FUNCTION_TYPE_H_
#define _FUNCTION_TYPE_H_

enum tagEXPUNITTYPE:unsigned int{
	EXP_UNIT_GROUP_TOKEN = 0x00000000,
	EXP_UNIT_GROUP_OPERAND = 0x10000000,
	EXP_UNIT_GROUP_FUNCTION = 0x20000000,
	EXP_UNIT_GROUP_OPERATOR = 0x40000000,
	EXP_UNIT_GROUP_USERFUNC = 0x80000000,
};

enum tagTokenID:unsigned int{
	//TokenID
	EXP_UNIT_OPEN_BRACKET,
	EXP_UNIT_CLOSED_BRACKET,
	EXP_UNIT_OPEN_SQUARE_BRACKET,
	EXP_UNIT_CLOSED_SQUARE_BRACKET,
	EXP_UNIT_COLON,
	EXP_UNIT_QUESTION_MARK,
	EXP_UNIT_DOUBLE_QUOTATION,
	EXP_UNIT_COLLECTION,
	//OperandID
	EXP_UNIT_CONST,
	EXP_UNIT_XOPERAND,
	EXP_UNIT_INCOMPFUNC,
	//FunctionID
	EXP_UNIT_OPERATOR_ADD,
	EXP_UNIT_OPERATOR_SUB,
	EXP_UNIT_OPERATOR_MUL,
	EXP_UNIT_OPERATOR_DEV,
	EXP_UNIT_OPERATOR_NEG,
	EXP_UNIT_OPERATOR_MOD,
	EXP_UNIT_OPERATOR_ASSIGNMENT,
	EXP_UNIT_OPERATOR_CAST,
	EXP_UNIT_COMMA,
	EXP_UNIT_NOPARAM_FUNC,
	EXP_UNIT_DYNAMIC_FUNC,
	EXP_UNIT_LOGIC_AND,
	EXP_UNIT_LOGIC_OR,
	EXP_UNIT_POSTFIX_INC,
	EXP_UNIT_PREFIX_INC,
	EXP_UNIT_POSTFIX_DEC,
	EXP_UNIT_PREFIX_DEC,
	EXP_UNIT_BITWISE_AND,

	EXP_UNIT_ARRAY,
	EXP_UNIT_MEMBER_ACCESS,
	EXP_UNIT_MAKE_REF,
	EXP_UNIT_SEMI_REF,
	EXP_UNIT_DEFAULT_COPY_CONTRUCTOR,
	EXP_UNIT_DEFAULT_COPY_CONTRUCTOR_REF,
	EXP_UNIT_SUBSCRIPT,
	EXP_UNIT_FUNCTIONCALL,
	EXP_UNIT_FORWARDCALL,
	EXP_UNIT_DEREF,
	EXP_UNIT_CREATE_LAMBDA,
	EXP_UNIT_CREATE_THREAD,
	EXP_UNIT_STATIC_ARRAY_SUBSCRIPT,

	EXP_UNIT_USER_FUNCTION,
};

//token id definitions
#define EXP_UNIT_ID_OPEN_BRACKET	(EXP_UNIT_OPEN_BRACKET|EXP_UNIT_GROUP_TOKEN)
#define EXP_UNIT_ID_CLOSED_BRACKET	(EXP_UNIT_CLOSED_BRACKET|EXP_UNIT_GROUP_TOKEN)
#define EXP_UNIT_ID_FUNC_SEPERATOR	(EXP_UNIT_COMMA|EXP_UNIT_GROUP_TOKEN)
#define EXP_UNIT_ID_OPEN_SQUARE_BRACKET		(EXP_UNIT_OPEN_SQUARE_BRACKET|EXP_UNIT_GROUP_TOKEN)
#define EXP_UNIT_ID_CLOSED_SQUARE_BRACKET	(EXP_UNIT_CLOSED_SQUARE_BRACKET|EXP_UNIT_GROUP_TOKEN)
#define EXP_UNIT_ID_COLLECTION				(EXP_UNIT_COLLECTION|EXP_UNIT_GROUP_TOKEN)

//operand function id definitions
#define EXP_UNIT_ID_CONST			(EXP_UNIT_CONST|EXP_UNIT_GROUP_OPERAND)
#define EXP_UNIT_ID_XOPERAND		(EXP_UNIT_XOPERAND|EXP_UNIT_GROUP_OPERAND)
#define EXP_UNIT_ID_INCOMPFUNC		(EXP_UNIT_INCOMPFUNC|EXP_UNIT_GROUP_OPERAND)

//function or operator id definitions
#define EXP_UNIT_ID_FUNC_CHOICE					(EXP_UNIT_COLON|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_FUNC_CONDITIONAL			(EXP_UNIT_QUESTION_MARK|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_OPERATOR_ADD				(EXP_UNIT_OPERATOR_ADD|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_OPERATOR_SUB				(EXP_UNIT_OPERATOR_SUB|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_OPERATOR_MUL				(EXP_UNIT_OPERATOR_MUL|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_OPERATOR_DEV				(EXP_UNIT_OPERATOR_DEV|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_OPERATOR_NEG				(EXP_UNIT_OPERATOR_NEG|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_OPERATOR_MOD				(EXP_UNIT_OPERATOR_MOD|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_OPERATOR_ASSIGNMENT			(EXP_UNIT_OPERATOR_ASSIGNMENT|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_OPERATOR_CAST				(EXP_UNIT_OPERATOR_CAST|EXP_UNIT_GROUP_FUNCTION)
#define EXP_UNIT_ID_OPERATOR_LOGIC_AND			(EXP_UNIT_LOGIC_AND|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_OPERATOR_LOGIC_OR			(EXP_UNIT_LOGIC_OR|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_OPERATOR_POSTFIX_INC		(EXP_UNIT_POSTFIX_INC|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_OPERATOR_PREFIX_INC			(EXP_UNIT_PREFIX_INC|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_OPERATOR_POSTFIX_DEC		(EXP_UNIT_POSTFIX_DEC|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_OPERATOR_PREFIX_DEC			(EXP_UNIT_PREFIX_DEC|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_OPERATOR_SUBSCRIPT			(EXP_UNIT_SUBSCRIPT|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_OPERATOR_FUNCTIONCALL		(EXP_UNIT_FUNCTIONCALL|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_FORWARD_CALL				(EXP_UNIT_FORWARDCALL|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_MEMBER_ACCESS				(EXP_UNIT_MEMBER_ACCESS|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_DEFAULT_COPY_CONTRUCTOR		(EXP_UNIT_DEFAULT_COPY_CONTRUCTOR|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_DEFAULT_COPY_CONTRUCTOR_REF	(EXP_UNIT_DEFAULT_COPY_CONTRUCTOR_REF|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_DEREF						(EXP_UNIT_DEREF|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_CREATE_LAMBDA				(EXP_UNIT_CREATE_LAMBDA|EXP_UNIT_GROUP_FUNCTION)
#define EXP_UNIT_ID_SEMI_REF					(EXP_UNIT_SEMI_REF|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_BITWISE_AND					(EXP_UNIT_BITWISE_AND|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
#define EXP_UNIT_ID_CREATE_THREAD				(EXP_UNIT_CREATE_THREAD|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_USERFUNC)
#define EXP_UNIT_ID_STATIC_ARRAY_SUBSCRIPT      (EXP_UNIT_STATIC_ARRAY_SUBSCRIPT|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)

#define EXP_UNIT_ID_NOPARAM_FUNC		(EXP_UNIT_NOPARAM_FUNC|EXP_UNIT_GROUP_OPERAND) /* no param function must be a operand */
#define EXP_UNIT_ID_DYNAMIC_FUNC		(EXP_UNIT_DYNAMIC_FUNC|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_USERFUNC) /* function type id for dynamic function */
#define EXP_UNIT_ID_MAKE_REF			(EXP_UNIT_MAKE_REF|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)
// user function definitions
#define EXP_UNIT_ID_USER_FUNC			(EXP_UNIT_USER_FUNCTION|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_USERFUNC)
#define EXP_UNIT_ID_USER_OPER			(EXP_UNIT_USER_FUNCTION|EXP_UNIT_GROUP_FUNCTION|EXP_UNIT_GROUP_OPERATOR)



#define FUNCTION_ODER_LEFT_2_RIGHT			0
#define FUNCTION_ODER_RIGHT_2_LEFT			1

//refer from http://en.cppreference.com/w/cpp/language/operator_precedence
#define FUNCTION_PRIORITY_HIGHEST			250
#define FUNCTION_PRIORITY_SUBSCRIPT			(FUNCTION_ODER_LEFT_2_RIGHT|220)	/* [] */
#define FUNCTION_PRIORITY_FUNCTIONCALL		(FUNCTION_ODER_LEFT_2_RIGHT|220)	/* () */
#define FUNCTION_PRIORITY_MEMBER_ACCESS		(FUNCTION_ODER_LEFT_2_RIGHT|220)	/* ., -> */
#define FUNCTION_PRIORITY_POSTFIX			(FUNCTION_ODER_LEFT_2_RIGHT|220)	/* a++, a-- */
#define FUNCTION_PRIORITY_UNARY_PREFIX		(FUNCTION_ODER_RIGHT_2_LEFT|210)	/*~, !, +, -, *, & */
#define FUNCTION_PRIORITY_PRETFIX			FUNCTION_PRIORITY_UNARY_PREFIX /* ++a, --a */
#define FUNCTION_PRIORITY_USER_FUNCTION		(FUNCTION_ODER_LEFT_2_RIGHT|200) /*sin, cos, sum, mid, ...*/
//#define FUNCTION_PRIORITY_POSTFIX			(FUNCTION_ODER_LEFT_2_RIGHT|190) /* a++, a-- */
#define FUNCTION_PRIORITY_MODULAR			(FUNCTION_ODER_LEFT_2_RIGHT|170) /* % */
#define FUNCTION_PRIORITY_MULTIPLICATIVE	FUNCTION_PRIORITY_MODULAR		 /* * / */
#define FUNCTION_PRIORITY_ADDITIVE			(FUNCTION_ODER_LEFT_2_RIGHT|160) /*+ -*/
#define FUNCTION_PRIORITY_SHIFT				(FUNCTION_ODER_LEFT_2_RIGHT|150) /*<<   >>*/
#define FUNCTION_PRIORITY_RELATIONAL		(FUNCTION_ODER_LEFT_2_RIGHT|140) /*<, >, <=, >=*/
#define FUNCTION_PRIORITY_EQUALITY			(FUNCTION_ODER_LEFT_2_RIGHT|130) /*== != */
#define FUNCTION_PRIORITY_BITWISE_AND		(FUNCTION_ODER_LEFT_2_RIGHT|120) /* & */
#define FUNCTION_PRIORITY_BITWISE_XOR		(FUNCTION_ODER_LEFT_2_RIGHT|110) /* ^ */
#define FUNCTION_PRIORITY_BITWISE_OR		(FUNCTION_ODER_LEFT_2_RIGHT|100) /* | */
#define FUNCTION_PRIORITY_LOGICAL_AND		(FUNCTION_ODER_LEFT_2_RIGHT|90) /* && */
#define FUNCTION_PRIORITY_LOGICAL_OR		(FUNCTION_ODER_LEFT_2_RIGHT|80) /* || */
#define FUNCTION_PRIORITY_CONDITIONAL		(FUNCTION_ODER_RIGHT_2_LEFT|70) /* ? */
#define FUNCTION_PRIORITY_ASSIGNMENT		(FUNCTION_ODER_RIGHT_2_LEFT|60) /* = */
#define FUNCTION_PRIORITY_CHOICE			(FUNCTION_ODER_LEFT_2_RIGHT|50) /* : */
//#define FUNCTION_PRIORITY_COMMA				(FUNCTION_ODER_LEFT_2_RIGHT|40) /* , */
#define FUNCTION_PRIORITY_LOWEST			(FUNCTION_ODER_LEFT_2_RIGHT|00)

#endif //_FUNCTION_TYPE_H_